syntax = "proto3";
package protocol;

// Vector3
message Vector {
  float x = 1;
  float y = 2;
  float z = 3;
}

// update the position of a user
message UpdatePlayerPosition {
  Vector position = 1;
  Vector direction = 2;
  Vector scale = 3;
  string user = 4;
  Vector velocity = 5;
}

// update the status of a player
message UpdatePlayerStatus {
  repeated bool went_through = 1; // tableau de booléens
  int32 lap_count = 2;
  bool has_hit_s_f_line_once = 3;
  int32 cp_count = 4;
  int32 next_checkpoint_number = 5;
  int32 supposed_next_checkpoint_number = 6;
  string user = 7;
  int32 virtual_lap_count = 8;
  int32 last_hitted_cp = 9;
  int32 second_last_hitted_cp = 10;
}

// request other players status
message UpdatePlayerStatusRequest {}

// definition of a chat message
message ChatMessage {
  string content = 1;
  string user = 2;
}

// when a user is disconnecting, he will automatically send this kind of message
// to others
message Disconnect { string user = 1; }

// request to create a new room
message CreateRoom {
  int32 room_type = 1;
  int32 id_circuit = 2;
  int32 max_players = 3;
}

message RoomListRequest {}

message RoomListResponse { repeated RoomListItem room_list = 1; }

message RoomListItem {
  string id = 1;
  int32 room_type = 2;
  int32 id_circuit = 3;
  int32 max_players = 4;
  int32 nb_players = 5;
  repeated Player players = 6;
}

message Player {
  string username = 1;
  int32 nb_races = 2;
  int32 nb_wins = 3;
  string record = 4;
}

// starts a game
message StartRoom {
  bool success = 1;
  RoomListItem room = 2;
}

// join a room
message JoinRoomRequest { string id = 1; }

message JoinRoomResponse {
  bool success = 1;
  RoomListItem room = 2;
}

message StartingPosition { repeated int32 position = 1; }

message RegisterRequest {
  string username = 1;
  string password = 2;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message RegisterResponse {
  bool success = 1;
  string username = 2;
  UserStats user_stats = 3;
}

message LoginResponse {
  bool success = 1;
  string username = 2;
  UserStats user_stats = 3;
}

message ChangeUsername { string username = 1; }

message UserStats {
  string username = 1;
  int32 race = 2;
  int32 victory = 3;
  string recordt1 = 4;
  string recordt2 = 5;
  string recordt3 = 6;
  int32 car1red = 7;
  int32 car1green = 8;
  int32 car1blue = 9;
  int32 car2red = 10;
  int32 car2green = 11;
  int32 car2blue = 12;
  int32 car3red = 13;
  int32 car3green = 14;
  int32 car3blue = 15;
  int32 car4red = 16;
  int32 car4green = 17;
  int32 car4blue = 18;
  float car1slider = 19;
  int32 car1redTR = 20;
  int32 car1greenTR = 21;
  int32 car1blueTR = 22;
  float car1cursorX = 23;
  float car1cursorY = 24;
  float car2slider = 25;
  int32 car2redTR = 26;
  int32 car2greenTR = 27;
  int32 car2blueTR = 28;
  float car2cursorX = 29;
  float car2cursorY = 30;
  float car3slider = 31;
  int32 car3redTR = 32;
  int32 car3greenTR = 33;
  int32 car3blueTR = 34;
  float car3cursorX = 35;
  float car3cursorY = 36;
  float car4slider = 37;
  int32 car4redTR = 38;
  int32 car4greenTR = 39;
  int32 car4blueTR = 40;
  float car4cursorX = 41;
  float car4cursorY = 42;
}

// permettra d'insérer les valeurs en BDD
message SetUserStats { UserStats user_stats = 1; }

// permettra de retrouner les valeurs en BDD
message UserStatsResponse { UserStats user_stats = 1; }

// un message vide, qui servira à déclencher l'envoi d'un UserStatsResponse de
// la part du serveur vers le client
message GetUserStats {}

// message that can be exchanged between the client and the server
// TYPE = "chat_message" if ChatMessage (for example)
message Message {
  string type = 1; // easier for fetching datas
  oneof msg {
    ChatMessage chat_message = 2;
    UpdatePlayerPosition update_player_position = 3;
    UpdatePlayerStatus update_player_status = 4;
    Disconnect disconnect = 5;
    UpdatePlayerStatusRequest update_player_status_request = 6;
    CreateRoom create_room = 7;
    StartRoom start_room = 8;
    JoinRoomRequest join_room_request = 9;
    StartingPosition starting_position = 10;
    RegisterRequest register_request = 11;
    LoginRequest login_request = 12;
    RegisterResponse register_response = 13;
    LoginResponse login_response = 14;
    RoomListRequest room_list_request = 15;
    RoomListResponse room_list_response = 16;
    ChangeUsername change_username = 17;
    JoinRoomResponse join_room_response = 18;
    SetUserStats set_user_stats = 19;
    GetUserStats get_user_stats = 20;
  }
}
